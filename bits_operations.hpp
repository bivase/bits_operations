#include "stdafx.h"

static std::map<uint64_t, uint8_t> Pos{
	{ 0x1, 0x00 }, { 0x2, 0x01 }, { 0x4, 0x02 }, { 0x8, 0x03 },
	{ 0x10, 0x04 }, { 0x20, 0x05 }, { 0x40, 0x06 }, { 0x80, 0x07 },
	{ 0x100, 0x08 }, { 0x200, 0x09 }, { 0x400, 0x0A }, { 0x800, 0x0B },
	{ 0x1000, 0x0C }, { 0x2000, 0x0D }, { 0x4000, 0x0E }, { 0x8000, 0x0F },

	{ 0x10000, 0x10 }, { 0x20000, 0x11 }, { 0x40000, 0x12 }, { 0x80000, 0x13 },
	{ 0x100000, 0x14 }, { 0x200000, 0x15 }, { 0x400000, 0x16 }, { 0x800000, 0x17 },
	{ 0x1000000, 0x18 }, { 0x2000000, 0x19 }, { 0x4000000, 0x1A }, { 0x8000000, 0x1B },
	{ 0x10000000, 0x1C }, { 0x20000000, 0x1D }, { 0x40000000, 0x1E }, { 0x80000000, 0x1F },

	{ 0x10000000, 0x20 }, { 0x20000000, 0x21 }, { 0x40000000, 0x22 }, { 0x80000000, 0x23 },
	{ 0x100000000, 0x24 }, { 0x200000000, 0x25 }, { 0x400000000, 0x26 }, { 0x800000000, 0x27 },
	{ 0x1000000000, 0x28 }, { 0x2000000000, 0x29 }, { 0x4000000000, 0x2A }, { 0x8000000000, 0x2B },
	{ 0x10000000000, 0x2C }, { 0x20000000000, 0x2D }, { 0x40000000000, 0x2E }, { 0x80000000000, 0x2F },

	{ 0x100000000000, 0x30 }, { 0x200000000000, 0x31 }, { 0x400000000000, 0x32 }, { 0x800000000000, 0x33 },
	{ 0x1000000000000, 0x34 }, { 0x2000000000000, 0x35 }, { 0x4000000000000, 0x36 }, { 0x8000000000000, 0x37 },
	{ 0x10000000000000, 0x38 }, { 0x20000000000000, 0x39 }, { 0x40000000000000, 0x3A }, { 0x80000000000000, 0x3B },
	{ 0x100000000000000, 0x3C }, { 0x200000000000000, 0x3D }, { 0x400000000000000, 0x3E }, { 0x800000000000000, 0x3F }
};
static const std::map<uint8_t, uint64_t> Val{
	{ 0x00, 0x1 }, { 0x01, 0x2 }, { 0x02, 0x4 }, { 0x03, 0x8 },
	{ 0x04, 0x10 }, { 0x05, 0x20 }, { 0x06, 0x40 }, { 0x07, 0x80 },
	{ 0x08, 0x100 }, { 0x09, 0x200 }, { 0x0A, 0x400 }, { 0x0B, 0x800 },
	{ 0x0C, 0x1000 }, { 0x0D, 0x2000 }, { 0x0E, 0x4000 }, { 0x0F, 0x8000 },

	{ 0x10, 0x10000 }, { 0x11, 0x20000 }, { 0x12, 0x40000 }, { 0x13, 0x80000 },
	{ 0x14, 0x100000 }, { 0x15, 0x200000 }, { 0x16, 0x400000 }, { 0x17, 0x800000 },
	{ 0x18, 0x1000000 }, { 0x19, 0x2000000 }, { 0x1A, 0x4000000 }, { 0x1B, 0x8000000 },
	{ 0x1C, 0x10000000 }, { 0x1D, 0x2000000 }, { 0x1E, 0x40000000 }, { 0x1F, 0x80000000 },

	{ 0x20, 0x10000000 }, { 0x21, 0x20000000 }, { 0x22, 0x40000000 }, { 0x23, 0x80000000 },
	{ 0x24, 0x100000000 }, { 0x25, 0x200000000 }, { 0x26, 0x400000000 }, { 0x27, 0x800000000 },
	{ 0x28, 0x1000000000 }, { 0x29, 0x2000000000 }, { 0x2A, 0x4000000000 }, { 0x2B, 0x8000000000 },
	{ 0x2C, 0x10000000000 }, { 0x2D, 0x20000000000 }, { 0x2E, 0x40000000000 }, { 0x2F, 0x80000000000 },

	{ 0x30, 0x100000000000 }, { 0x31, 0x200000000000 }, { 0x32, 0x400000000000 }, { 0x33, 0x800000000000 },
	{ 0x34, 0x1000000000000 }, { 0x35, 0x2000000000000 }, { 0x36, 0x4000000000000 }, { 0x37, 0x8000000000000 },
	{ 0x38, 0x10000000000000 }, { 0x39, 0x20000000000000 }, { 0x3A, 0x40000000000000 }, { 0x3B, 0x80000000000000 },
	{ 0x3C, 0x100000000000000 }, { 0x3D, 0x200000000000000 }, { 0x3E, 0x400000000000000 }, { 0x3F, 0x800000000000000 }
};

constexpr uint64_t MAX_ELEMENT{ 0xFFFFFFFFFFFFFFFF };
class Tables
{
	static const inline std::array<uint64_t, 65> arrFill{
		0,
		1, 3, 7,
		0xF, 0x1F, 0x3F, 0x7F,
		0xFF, 0x1FF, 0x3FF, 0x7FF,
		0xFFF, 0x1FFF, 0x3FFF, 0x7FFF,
		0xFFFF, 0x1FFFF, 0x3FFFF, 0x7FFFF,
		0xFFFFF, 0x1FFFFF, 0x3FFFFF, 0x7FFFFF,
		0xFFFFFF, 0x1FFFFFF, 0x3FFFFFF, 0x7FFFFFF,
		0xFFFFFFF, 0x1FFFFFFF, 0x3FFFFFFF, 0x7FFFFFFF,
		0xFFFFFFFF, 0x1FFFFFFFF, 0x3FFFFFFFF, 0x7FFFFFFFF,
		0xFFFFFFFFF, 0x1FFFFFFFFF, 0x3FFFFFFFFF, 0x7FFFFFFFFF,
		0xFFFFFFFFFF, 0x1FFFFFFFFFF, 0x3FFFFFFFFFF, 0x7FFFFFFFFFF,
		0xFFFFFFFFFFF, 0x1FFFFFFFFFFF, 0x3FFFFFFFFFFF, 0x7FFFFFFFFFFF,
		0xFFFFFFFFFFFF, 0x1FFFFFFFFFFFF, 0x3FFFFFFFFFFFF, 0x7FFFFFFFFFFFF,
		0xFFFFFFFFFFFFF, 0x1FFFFFFFFFFFFF, 0x3FFFFFFFFFFFFF, 0x7FFFFFFFFFFFFF,
		0xFFFFFFFFFFFFFF, 0x1FFFFFFFFFFFFFF, 0x3FFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFF,
		0xFFFFFFFFFFFFFFF, 0x1FFFFFFFFFFFFFFF, 0x3FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF,
		MAX_ELEMENT
	};
public:
	Tables(Tables&) = delete;
	Tables(const Tables&) = delete;
	Tables operator=(const Tables&) = delete;
	Tables(Tables&&) = delete;
	Tables operator=(Tables&&) = delete;
	~Tables()
	{
	}

	static uint64_t Fill(size_t idx)noexcept
	{
		if (idx > 0x40)
		{
			return MAX_ELEMENT;
		}
		return arrFill[idx];
	}
};

template<class T>
constexpr auto NegShift{
	[](size_t shift)noexcept
	{
		return static_cast<T>((sizeof(T) * 8) - shift);
}
};
constexpr auto Rol{
	[] <class T>(T elm, size_t shift)noexcept
{
	return T{ ((elm & Tables::Fill(NegShift<uint8_t>(shift))) << shift) | ((elm >> NegShift<uint8_t>(shift)) & Tables::Fill(shift)) };
}
};
constexpr auto Ror{
	[] <class T, class S>(T elm, S shift)noexcept
{
	return 
		static_cast<T>((Tables::Fill(NegShift<uint8_t>(shift))) & (elm >> shift)) | ((Tables::Fill(shift) & elm) << NegShift<uint8_t>(shift));
}
};
constexpr auto shl_elm{
	[] <class T, class S>(T & front, T & back, S shift)noexcept
{
	return
		static_cast<T>(front << shift) | static_cast<T>(back >> NegShift<T>(shift));
}
};

constexpr auto change_endian{
	[] <class T>(T && byte)noexcept
{
	return
		(byte & 0b0000'0001) << 7 |
		(byte & 0b0000'0010) << 5 |
		(byte & 0b0000'0100) << 3 |
		(byte & 0b0000'1000) << 1 |
		(byte & 0b0001'0000) >> 1 |
		(byte & 0b0010'0000) >> 3 |
		(byte & 0b0100'0000) >> 5 |
		(byte & 0b1000'0000) >> 7;
}
};
template<class T>
void ChangeEndian(T& data)noexcept
{
	std::transform(
		std::execution::par,
		std::cbegin(data), std::cend(data),
		std::begin(data),
		change_endian
	);
};